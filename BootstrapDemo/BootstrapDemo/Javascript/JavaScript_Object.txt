在JavaScript中，

Date
    Date对象用来表示日期和时间。

	要获取系统当前时间，用：

	var now = new Date();
	now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
	now.getFullYear(); // 2015, 年份
	now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月
	now.getDate(); // 24, 表示24号
	now.getDay(); // 3, 表示星期三
	now.getHours(); // 19, 24小时制
	now.getMinutes(); // 49, 分钟
	now.getSeconds(); // 22, 秒
	now.getMilliseconds(); // 875, 毫秒数
	now.getTime(); // 1435146562875, 以number形式表示的时间戳

	时间戳是个什么东西？时间戳是一个自增的整数，它表示从1970年1月1日零时整的GMT时区开始的那一刻，到现在的毫秒数。假设浏览器所在电脑的时间是准确的，那么世界上无论哪个时区的电脑，它们此刻产生的时间戳数字都是一样的，所以，时间戳可以精确地表示一个时刻，并且与时区无关。

RegExp

    正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。

    在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：

	'00\d'可以匹配'007'，但无法匹配'00A'；

	'\d\d\d'可以匹配'010'；

	'\w\w'可以匹配'js'；

	.可以匹配任意字符，所以：

	'js.'可以匹配'jsp'、'jss'、'js!'等等。

	要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：

	来看一个复杂的例子：\d{3}\s+\d{3,8}。

	我们来从左到右解读一下：

	\d{3}表示匹配3个数字，例如'010'；

	\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，'\t\t'等；

	\d{3,8}表示3-8个数字，例如'1234567'。

	综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。

	如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}。

	但是，仍然无法匹配'010 - 12345'，因为带有空格。所以我们需要更复杂的匹配方式。