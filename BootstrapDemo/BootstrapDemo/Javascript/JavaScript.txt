数据类型

	1.Number

	JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：
	EXP:
		123;      // 整数123
		0.456;    // 浮点数0.456
		1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5
		-99;      // 负数
		NaN;      // NaN表示Not a Number，当无法计算结果时用NaN表示
		Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity

	2.字符串

	字符串是以单引号'或双引号"括起来的任意文本，比如'abc'，"xyz"等等。

	3.布尔值

	布尔值和布尔代数的表示完全一致，一个布尔值只有true、false两种值，要么是true，要么是false，可以直接用true、false表示布尔值，也可以通过布尔运算计算出来：

	4.比较运算符

	第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；

	第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。

	由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。

	另一个例外是NaN这个特殊的Number与所有其他值都不相等

	isNaN(NaN); // true

	注意浮点数的相等比较

	这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：

	Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true

	5数组

	数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。

	[1, 2, 3.14, 'Hello', null, true];

	6.对象

	JavaScript的对象是一组由键-值组成的无序集合.
	var person = {
	    name: 'Bob',
	    age: 20,
	    tags: ['js', 'web', 'mobile'],
	    city: 'Beijing',
	    hasCar: true,
	    zipcode: null
	};
	JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述person对象一共定义了6个键值对，其中每个键又称为对象的属性，例如，person的name属性为'Bob'，zipcode属性为null。

	要获取一个对象的属性，我们用对象变量.属性名的方式：

	person.name; // 'Bob'
	person.zipcode; // null


	7strict模式

	JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量：

	i = 10; // i现在是全局变量
	在同一个页面的不同的JavaScript文件中，如果都不用var申明，恰好都使用了变量i，将造成变量i互相影响，产生难以调试的错误结果。

	使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。

	为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。

	启用strict模式的方法是在JavaScript代码的第一行写上：

	'use strict';
	这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。




    8.字符串的操作

    字符串常见的操作如下：

	var s = 'Hello, world!';
	s.length; // 13
	要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：

	var s = 'Hello, world!';

	s[0]; // 'H'
	s[6]; // ' '
	s[7]; // 'w'
	s[12]; // '!'
	s[13]; // undefined 超出范围的索引不会报错，但一律返回undefined
	需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：

	var s = 'Test';
	s[0] = 'X';
	alert(s); // s仍然为'Test'
	JavaScript为字符串提供了一些常用方法，注意，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串：
	
	toUpperCase

	toUpperCase()把一个字符串全部变为大写：

	var s = 'Hello';
	s.toUpperCase(); // 返回'HELLO'
	toLowerCase

	toLowerCase()把一个字符串全部变为小写：

	var s = 'Hello';
	var lower = s.toLowerCase(); // 返回'hello'并赋值给变量lower
	lower; // 'hello'
	indexOf

	indexOf()会搜索指定字符串出现的位置：

	var s = 'hello, world';
	s.indexOf('world'); // 返回7
	s.indexOf('World'); // 没有找到指定的子串，返回-1
	substring

	substring()返回指定索引区间的子串：

	var s = 'hello, world'
	s.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello'
	s.substring(7); // 从索引7开始到结束，返回'world'

    9.数组

    JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。

	要取得Array的长度，直接访问length属性：

	var arr = [1, 2, 3.14, 'Hello', null, true];
	arr.length; // 6
	请注意，直接给Array的length赋一个新的值会导致Array大小的变化：

	var arr = [1, 2, 3];
	arr.length; // 3
	arr.length = 6;
	arr; // arr变为[1, 2, 3, undefined, undefined, undefined]
	arr.length = 2;
	arr; // arr变为[1, 2]
	Array可以通过索引把对应的元素修改为新的值，因此，对Array的索引进行赋值会直接修改这个Array：

	var arr = ['A', 'B', 'C'];
	arr[1] = 99;
	arr; // arr现在变为['A', 99, 'C']
	请注意，如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化：

	var arr = [1, 2, 3];
	arr[5] = 'x';
	arr; // arr变为[1, 2, 3, undefined, undefined, 'x']
	大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的Array却不会有任何错误。在编写代码时，不建议直接修改Array的大小，访问索引时要确保索引不会越界。

	indexOf

	与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置：

	var arr = [10, 20, '30', 'xyz'];
	arr.indexOf(10); // 元素10的索引为0
	arr.indexOf(20); // 元素20的索引为1
	arr.indexOf(30); // 元素30没有找到，返回-1
	arr.indexOf('30'); // 元素'30'的索引为2
	注意了，数字30和字符串'30'是不同的元素。

	slice

	slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array：

	var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
	arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']
	arr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']
	注意到slice()的起止参数包括开始索引，不包括结束索引。

	如果不给slice()传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个Array：

	var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
	var aCopy = arr.slice();
	aCopy; // ['A', 'B', 'C', 'D', 'E', 'F', 'G']
	aCopy === arr; // false
	push和pop

	push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：

	var arr = [1, 2];
	arr.push('A', 'B'); // 返回Array新的长度: 4
	arr; // [1, 2, 'A', 'B']
	arr.pop(); // pop()返回'B'
	arr; // [1, 2, 'A']
	arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次
	arr; // []
	arr.pop(); // 空数组继续pop不会报错，而是返回undefined
	arr; // []
	unshift和shift

	如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：

	var arr = [1, 2];
	arr.unshift('A', 'B'); // 返回Array新的长度: 4
	arr; // ['A', 'B', 1, 2]
	arr.shift(); // 'A'
	arr; // ['B', 1, 2]
	arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次
	arr; // []
	arr.shift(); // 空数组继续shift不会报错，而是返回undefined
	arr; // []
	sort

	sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：

	var arr = ['B', 'C', 'A'];
	arr.sort();
	arr; // ['A', 'B', 'C']
	能否按照我们自己指定的顺序排序呢？完全可以，我们将在后面的函数中讲到。

	reverse

	reverse()把整个Array的元素给掉个个，也就是反转：

	var arr = ['one', 'two', 'three'];
	arr.reverse(); 
	arr; // ['three', 'two', 'one']
	splice

	splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：

	var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
	// 从索引2开始删除3个元素,然后再添加两个元素:
	arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
	arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
	// 只删除,不添加:
	arr.splice(2, 2); // ['Google', 'Facebook']
	arr; // ['Microsoft', 'Apple', 'Oracle']
	// 只添加,不删除:
	arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素
	arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
	concat

	concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：

	var arr = ['A', 'B', 'C'];
	var added = arr.concat([1, 2, 3]);
	added; // ['A', 'B', 'C', 1, 2, 3]
	arr; // ['A', 'B', 'C']
	请注意，concat()方法并没有修改当前Array，而是返回了一个新的Array。

	实际上，concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里：

	var arr = ['A', 'B', 'C'];
	arr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]
	join

	join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：

	var arr = ['A', 'B', 'C', 1, 2, 3];
	arr.join('-'); // 'A-B-C-1-2-3'
	如果Array的元素不是字符串，将自动转换为字符串后再连接。

	多维数组

	如果数组的某个元素又是一个Array，则可以形成多维数组，例如：

	var arr = [[1, 2, 3], [400, 500, 600], '-'];
	上述Array包含3个元素，其中头两个元素本身也是Array。
    
    10.对象

    JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。

	JavaScript的对象用于描述现实世界中的某个对象。例如，为了描述“小明”这个淘气的小朋友，我们可以用若干键值对来描述他：

	var xiaoming = {
	    name: '小明',
	    birth: 1990,
	    school: 'No.1 Middle School',
	    height: 1.70,
	    weight: 65,
	    score: null
	};
	JavaScript用一个{...}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错。

	上述对象申明了一个name属性，值是'小明'，birth属性，值是1990，以及其他一些属性。最后，把这个对象赋值给变量xiaoming后，就可以通过变量xiaoming来获取小明的属性了：

	xiaoming.name; // '小明'
	xiaoming.birth; // 1990
	访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用''括起来：

	var xiaohong = {
	    name: '小红',
	    'middle-school': 'No.1 Middle School'
	};
	xiaohong的属性名middle-school不是一个有效的变量，就需要用''括起来。访问这个属性也无法使用.操作符，必须用['xxx']来访问：

	xiaohong['middle-school']; // 'No.1 Middle School'
	xiaohong['name']; // '小红'
	xiaohong.name; // '小红'
	也可以用xiaohong['name']来访问xiaohong的name属性，不过xiaohong.name的写法更简洁。我们在编写JavaScript代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过object.prop的形式访问一个属性了。

	实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。

	如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回undefined：

	var xiaoming = {
	    name: '小明'
	};
	xiaoming.age; // undefined
	由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性：

	var xiaoming = {
	    name: '小明'
	};
	xiaoming.age; // undefined
	xiaoming.age = 18; // 新增一个age属性
	xiaoming.age; // 18
	delete xiaoming.age; // 删除age属性
	xiaoming.age; // undefined
	delete xiaoming['name']; // 删除name属性
	xiaoming.name; // undefined
	delete xiaoming.school; // 删除一个不存在的school属性也不会报错
	如果我们要检测xiaoming是否拥有某一属性，可以用in操作符：

	var xiaoming = {
	    name: '小明',
	    birth: 1990,
	    school: 'No.1 Middle School',
	    height: 1.70,
	    weight: 65,
	    score: null
	};
	'name' in xiaoming; // true
	'grade' in xiaoming; // false
	不过要小心，如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的：

	'toString' in xiaoming; // true
	因为toString定义在object对象中，而所有对象最终都会在原型链上指向object，所以xiaoming也拥有toString属性。

	要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：

	var xiaoming = {
	    name: '小明'
	};
	xiaoming.hasOwnProperty('name'); // true
	xiaoming.hasOwnProperty('toString'); // false



















