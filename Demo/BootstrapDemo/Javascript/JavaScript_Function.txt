	1.函数
	JavaScript的函数不但是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。

	定义函数

	在JavaScript中，定义函数的方式如下：

	function abs(x) {
	    if (x >= 0) {
	        return x;
	    } else {
	        return -x;
	    }
	}

	上述abs()函数的定义如下：

	function指出这是一个函数定义；
	abs是函数的名称；
	(x)括号内列出函数的参数，多个参数以,分隔；
	{ ... }之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。
	请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。

	如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。

	第二种定义函数的方式如下：

	var abs = function (x) {
	    if (x >= 0) {
	        return x;
	    } else {
	        return -x;
	    }
	};

	调用函数

	调用函数时，按顺序传入参数即可：

	abs(10); // 返回10
	abs(-9); // 返回9
	由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：

	abs(10, 'blablabla'); // 返回10
	abs(-9, 'haha', 'hehe', null); // 返回9
	传入的参数比定义的少也没有问题：

	abs(); // 返回NaN
	此时abs(x)函数的参数x将收到undefined，计算结果为NaN。

	arguments

    JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array：
    function foo(x) {
    alert(x); // 10
    for (var i=0; i<arguments.length; i++) {
        alert(arguments[i]); // 10, 20, 30
    }
	}
	foo(10, 20, 30);

    利用arguments，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值
    function abs() {
    if (arguments.length === 0) {
        return 0;
    }
    var x = arguments[0];
    return x >= 0 ? x : -x;
	}

	abs(); // 0
	abs(10); // 10
	abs(-9); // 9

	实际上arguments最常用于判断传入参数的个数。你可能会看到这样的写法：
    // foo(a[, b], c)
	// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：
	function foo(a, b, c) {
	    if (arguments.length === 2) {
	        // 实际拿到的参数是a和b，c为undefined
	        c = b; // 把b赋给c
	        b = null; // b变为默认值
	    }
	    // ...
	}

	rest参数[ES6标准]

    由于JavaScript函数允许接收任意个参数，于是我们就不得不用arguments来获取所有参数：
    function foo(a, b) {
	    var i, rest = [];
	    if (arguments.length > 2) {
	        for (i = 2; i<arguments.length; i++) {
	            rest.push(arguments[i]);
	        }
	    }
	    console.log('a = ' + a);
	    console.log('b = ' + b);
	    console.log(rest);
    }
    
    ES6标准引入了rest参数
    function foo(a, b, ...rest) {
	    console.log('a = ' + a);
	    console.log('b = ' + b);
	    console.log(rest);
	}

	foo(1, 2, 3, 4, 5);
	// 结果:
	// a = 1
	// b = 2
	// Array [ 3, 4, 5 ]

	foo(1);
	// 结果:
	// a = 1
	// b = undefined
	// Array []

	小心你的return语句

	function foo() {
       return { name: 'foo' };
	}

	foo(); // { name: 'foo' }
	如果把return语句拆成两行：

	function foo() {
	    return
	        { name: 'foo' };
	}

	foo(); // undefined
	要小心了，由于JavaScript引擎在行末自动添加分号的机制，上面的代码实际上变成了：

	function foo() {
	    return; // 自动添加了分号，相当于return undefined;
	        { name: 'foo' }; // 这行语句已经没法执行到了
	}
	所以正确的多行写法是：

	function foo() {
	    return { // 这里不会自动加分号，因为{表示语句尚未结束
	        name: 'foo'
	    };
	}

	//-----------------------------------------------------------------------------------------------------//

    2.变量作用域

    在JavaScript中，用var申明的变量实际上是有作用域的。

	如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量：

	'use strict';

	function foo() {
	    var x = 1;
	    x = x + 1;
	}

	x = x + 2; // ReferenceError! 无法在函数体外引用变量x

	如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响：

	'use strict';

	function foo() {
	    var x = 1;
	    x = x + 1;
	}

	function bar() {
	    var x = 'A';
	    x = x + 'B';
	}

	由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行：

	'use strict';

	function foo() {
	    var x = 1;
	    function bar() {
	        var y = x + 1; // bar可以访问foo的变量x!
	    }
	    var z = y + 1; // ReferenceError! foo不可以访问bar的变量y!
	}

	如果内部函数和外部函数的变量名重名怎么办？

	'use strict';

	function foo() {
	    var x = 1;
	    function bar() {
	        var x = 'A';
	        alert('x in bar() = ' + x); // 'A'
	    }
	    alert('x in foo() = ' + x); // 1
	    bar();
	}
	这说明JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。

	变量提升:JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：

    全局作用域:不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性：

	'use strict';

	var course = 'Learn JavaScript';
	alert(course); // 'Learn JavaScript'
	alert(window.course); // 'Learn JavaScript'
	因此，直接访问全局变量course和访问window.course是完全一样的。

	你可能猜到了，由于函数定义有两种方式，以变量方式var foo = function () {}定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：

	'use strict';

	function foo() {
	    alert('foo');
	}

	foo(); // 直接调用foo()
	window.foo(); // 通过window.foo()调用


	名字空间:全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。

	减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：

	// 唯一的全局变量MYAPP:
	var MYAPP = {};

	// 其他变量:
	MYAPP.name = 'myapp';
	MYAPP.version = 1.0;

	// 其他函数:
	MYAPP.foo = function () {
	    return 'foo';
	};

	把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。
    许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。
    
    常量[ES6]

	由于var和let申明的是变量，如果要申明一个常量，在ES6之前是不行的，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”：

	var PI = 3.14;
	ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域：

	'use strict';

	const PI = 3.14;
	PI = 3; // 某些浏览器不报错，但是无效果！
	PI;     // 3.14

	//-----------------------------------------------------------------------------------------------------//

    方法

    在一个对象中绑定函数，称为这个对象的方法。

	在JavaScript中，对象的定义是这样的：

	var xiaoming = {
	    name: '小明',
	    birth: 1990
	};

	如果我们给xiaoming绑定一个函数，就可以做更多的事情。比如，写个age()方法，返回xiaoming的年龄：

	var xiaoming = {
	    name: '小明',
	    birth: 1990,
	    age: function () {
	        var y = new Date().getFullYear();
	        return y - this.birth;
	    }
	};


    用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。
	'use strict';

	var xiaoming = {
	    name: '小明',
	    birth: 1990,
	    age: function () {
	        var that = this; // 在方法内部一开始就捕获this
	        function getAgeFromBirth() {
	            var y = new Date().getFullYear();
	            return y - that.birth; // 用that而不是this
	        }
	        return getAgeFromBirth();
	    }
	};

	xiaoming.age(); // 25


	apply

	虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！

	要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。

	用apply修复getAge()调用：

	function getAge() {
	    var y = new Date().getFullYear();
	    return y - this.birth;
	}

	var xiaoming = {
	    name: '小明',
	    birth: 1990,
	    age: getAge
	};

	xiaoming.age(); // 25
	getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空
	另一个与apply()类似的方法是call()，唯一区别是：

	apply()把参数打包成Array再传入；

	call()把参数按顺序传入。

	比如调用Math.max(3, 5, 4)，分别用apply()和call()实现如下：

	Math.max.apply(null, [3, 5, 4]); // 5
	Math.max.call(null, 3, 5, 4); // 5
	对普通函数调用，我们通常把this绑定为null。

	利用apply()，我们还可以动态改变函数的行为。

	JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。

	现在假定我们想统计一下代码一共调用了多少次parseInt()，可以把所有的调用都找出来，然后手动加上count += 1，不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的parseInt()：

	var count = 0;
	var oldParseInt = parseInt; // 保存原函数

	window.parseInt = function () {
	    count += 1;
	    return oldParseInt.apply(null, arguments); // 调用原函数
	};

	// 测试:
	parseInt('10');
	parseInt('20');
	parseInt('30');
	count; // 3


//-----------------------------------------------------------------------------------------------------//
  高阶函数
  JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。

  编写高阶函数，就是让函数的参数能够接收别的函数。

  MapReduce
  
  map

  举例说明，比如我们有一个函数f(x)=x2，要把这个函数作用在一个数组[1, 2, 3, 4, 5, 6, 7, 8, 9]上，就可以用map实现如下：
  map()作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的
  f(x)=x2，还可以计算任意复杂的函数，比如，把Array的所有数字转为字符串

  reduce

  再看reduce的用法。Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算
  [x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)



  filter

  filter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。

  和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。

  var arr = [1, 2, 4, 5, 6, 9, 10, 15];
  var r = arr.filter(function (x) {
	    return x % 2 !== 0;
  });

  把一个Array中的空字符串删掉，可以这么写：

  var arr = ['A', '', 'B', null, undefined, 'C', '  '];
  var r = arr.filter(function (s) {
	    return s && s.trim(); // 注意：IE9以下的版本没有trim()方法
  });
  r; // ['A', 'B', 'C']


  排序算法

  排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。如果是数字，我们可以直接比较，但如果是字符串或者两个对象呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。通常规定，对于两个元素x和y，如果认为x < y，则返回-1，如果认为x == y，则返回0，如果认为x > y，则返回1，这样，排序算法就不用关心具体的比较过程，而是根据比较结果直接排序。

  JavaScript的Array的sort()方法就是用于排序的
  // 看上去正常的结果:
  ['Google', 'Apple', 'Microsoft'].sort(); // ['Apple', 'Google', 'Microsoft'];

  // apple排在了最后:
  ['Google', 'apple', 'Microsoft'].sort(); // ['Google', 'Microsoft", 'apple']

  // 无法理解的结果:
  [10, 20, 1, 2].sort(); // [1, 10, 2, 20]

  如果不知道sort()方法的默认排序规则，直接对数字排序，绝对栽进坑里！

  sort()方法也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序。

  要按数字大小排序，我们可以这么写：

	var arr = [10, 20, 1, 2];
	arr.sort(function (x, y) {
	    if (x < y) {
	        return -1;
	    }
	    if (x > y) {
	        return 1;
	    }
	    return 0;
	}); // [1, 2, 10, 20]

	var arr = [10, 20, 1, 2];
	arr.sort(function (x, y) {
	    if (x < y) {
	        return 1;
	    }
	    if (x > y) {
	        return -1;
	    }
	    return 0;
	}); // [20, 10, 2, 1]

//---------------------------------------------------------------------------------------------------------//

  函数作为返回值

  function sum(arr) {
    var res = arr.reduce(function (x, y) {
        return x + y;
    });
    return  res;
  }
  与 
  function sum(arr) {
    return arr.reduce(function (x, y) {
        return x + y;
    });
  }

  如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数！

	function lazy_sum(arr) {
	    var sum = function () {
	        return arr.reduce(function (x, y) {
	            return x + y;
	        });
	    }
	    return sum;
	}
  
   var f = lazy_sum([1, 2, 3, 4, 5]); // function sum()
   调用函数f时，才真正计算求和的结果：
   f(); // 15
    
   var f1 = lazy_sum([1, 2, 3, 4, 5]);
   var f2 = lazy_sum([1, 2, 3, 4, 5]);
   f1 === f2; // false

   f1()和f2()的调用结果互不影响。

   闭包：闭包有非常强大的功能

   function count() {
	    var arr = [];
	    for (var i=1; i<=3; i++) {
	        arr.push(
	            //创建立即执行函数
	            (function (n) {
	            return function () {
	                return n * n;
	            }
	            })(i));
	    }
	    return arr;
	}

	var results = count();
	var f1 = results[0];
	var f2 = results[1];
	var f3 = results[2];

	f1(); // 1
	f2(); // 4
	f3(); // 

    理论上讲，创建一个匿名函数并立刻执行可以这么写：
	function (x) { return x * x } (3);
	但是由于JavaScript语法解析的问题，会报SyntaxError错误，因此需要用括号把整个函数定义括起来：
	(function (x) { return x * x }) (3);
	通常，一个立即执行的匿名函数可以把函数体拆开，一般这么写：
	(function (x) {
	    return x * x;
	})(3);

    在面向对象的程序设计语言里，比如Java和C++，要在对象内部封装一个私有变量，可以用private修饰一个成员变量。

    在没有class机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。

    'use strict';

	function create_counter(initial) {
	    var x = initial || 0;
	    return {
	        inc: function () {
	            x += 1;
	            return x;
	        }
	    }
	}

	var c1 = create_counter();
	c1.inc(); // 1
	c1.inc(); // 2
	c1.inc(); // 3

	var c2 = create_counter(10);
	c2.inc(); // 11
	c2.inc(); // 12
	c2.inc(); // 13

    闭包还可以把多参数的函数变成单参数的函数。例如，要计算xy可以用Math.pow(x, y)函数，不过考虑到经常计算x2或x3，我们可以利用闭包创建新的函数pow2和pow3：

	function make_pow(n) {
	    return function (x) {
	        return Math.pow(x, n);
	    }
	}

	// 创建两个新函数:
	var pow2 = make_pow(2);
	var pow3 = make_pow(3);

	pow2(5); // 25
	pow3(7); // 343


    










