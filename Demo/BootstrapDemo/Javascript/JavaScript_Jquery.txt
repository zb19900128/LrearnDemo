	jQuery
	JavaScript世界中使用最广泛的一个库。
	jQuery这么流行，肯定是因为它解决了一些很重要的问题。实际上，jQuery能帮我们干这些事情：
	1.消除浏览器差异：你不需要自己写冗长的代码来针对不同的浏览器来绑定事件，编写AJAX等代码；
	2.简洁的操作DOM的方法：写$('#test')肯定比document.getElementById('test')来得简洁；
	3.轻松实现动画、修改CSS等各种操作。
	jQuery的理念“Write Less, Do More“，让你写更少的代码，完成更多的工作！

	jQuery版本
    目前jQuery有1.x和2.x两个主要版本，区别在于2.x移除了对古老的IE 6、7、8的支持，因此2.x的代码更精简。选择哪个版本主要取决于你是否想支持IE 6~8。
    从jQuery官网可以下载最新版本。jQuery只是一个jquery-xxx.js文件，但你会看到有compressed（已压缩）和uncompressed（未压缩）两种版本，使用时完全一样，但如果你想深入研究jQuery源码，那就用uncompressed版本。

    window.jQuery; // jQuery(selector, context)
    window.$; // jQuery(selector, context)
    $ === jQuery; // true
    typeof($); // 'function'

    绝大多数时候，我们都直接用$（因为写起来更简单嘛）。但是，如果$这个变量不幸地被占用了，而且还不能改，那我们就只能让jQuery把$变量交出来，然后就只能使用jQuery这个变量.


    选择器是jQuery的核心。一个选择器写出来类似$('#dom-id')。
    按ID查找:如果某个DOM节点有id属性 
    // 查找<div id="abc">: 
       var div = $('#abc');
    jQuery对象类似数组，它的每个元素都是一个引用了DOM节点的对象。[<div id="abc">...</div>]
    如果id为abc的<div>不存在，[]
    按tag查找:按tag查找只需要写上tag名称
    var ps = $('p'); // 返回所有<p>节点
    ps.length;       // 数一数页面有多少个<p>节点
    按class查找:按class查找注意在class名称前加一个.：
    var a = $('.red'); // 所有节点包含`class="red"`都将返回
	// 例如:
	// <div class="red">...</div>
	// <p class="green red">...</p>

	层级选择器(Descendant Selector)
	如果两个DOM元素具有层级关系，就可以用$('ancestor descendant')来选择，层级之间用空格隔开。
	<div class="testing">
	    <ul class="lang">
	        <li class="lang-javascript">JavaScript</li>
	        <li class="lang-python">Python</li>
	        <li class="lang-lua">Lua</li>
	    </ul>
	</div>

	$('ul.lang li.lang-javascript');     // [<li class="lang-javascript">JavaScript</li>]
    $('div.testing li.lang-javascript'); // [<li class="lang-javascript">JavaScript</li>]

    子选择器（Child Selector）
    子选择器$('parent>child')类似层级选择器，但是限定了层级关系必须是父子关系，就是<child>节点必须是<parent>节点的直属子节点。还是以上面的例子：
    $('ul.lang>li.lang-javascript'); // 可以选出[<li class="lang-javascript">JavaScript</li>]
    $('div.testing>li.lang-javascript'); // [], 无法选出，因为<div>和<li>不构成父子关系

    过滤器（Filter）
    过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。
    $('ul.lang li'); // 选出JavaScript、Python和Lua 3个节点
	$('ul.lang li:first-child'); // 仅选出JavaScript
	$('ul.lang li:last-child'); // 仅选出Lua
	$('ul.lang li:nth-child(2)'); // 选出第N个元素，N从1开始
	$('ul.lang li:nth-child(even)'); // 选出序号为偶数的元素
	$('ul.lang li:nth-child(odd)'); // 选出序号为奇数的元素


	表单相关
    针对表单元素，jQuery还有一组特殊的选择器：
    :input：可以选择<input>，<textarea>，<select>和<button>；
    :file：可以选择<input type="file">，和input[type=file]一样；
    :checkbox：可以选择复选框，和input[type=checkbox]一样；
    :radio：可以选择单选框，和input[type=radio]一样；
    :focus：可以选择当前输入焦点的元素，例如把光标放到一个<input>上，用$('input:focus')就可以选出；
    :checked：选择当前勾上的单选框和复选框，用这个选择器可以立刻获得用户选择的项目，如$('input[type=radio]:checked')；
    :enabled：可以选择可以正常输入的<input>、<select>等，也就是没有灰掉的输入；
    :disabled：和:enabled正好相反，选择那些不能输入的。
    此外，jQuery还有很多有用的选择器，例如，选出可见的或隐藏的元素：
    $('div:visible'); // 所有可见的div
    $('div:hidden'); // 所有隐藏的div

    查找和过滤
    通常情况下选择器可以直接定位到我们想要的元素，但是，当我们拿到一个jQuery对象后，还可以以这个对象为基准，进行查找和过滤。
    最常见的查找是在某个节点的所有子节点中查找，使用find()方法，它本身又接收一个任意的选择器。
    <!-- HTML结构 -->
	<ul class="lang">
	    <li class="js dy">JavaScript</li>
	    <li class="dy">Python</li>
	    <li id="swift">Swift</li>
	    <li class="dy">Scheme</li>
	    <li name="haskell">Haskell</li>
	</ul>
	用find()查找：

	var ul = $('ul.lang'); // 获得<ul>
	var dy = ul.find('.dy'); // 获得JavaScript, Python, Scheme
	var swf = ul.find('#swift'); // 获得Swift
	var hsk = ul.find('[name=haskell]'); // 获得Haskell

	如果要从当前节点开始向上查找，使用parent()方法：
	var swf = $('#swift'); // 获得Swift
	var parent = swf.parent(); // 获得Swift的上层节点<ul>
	var a = swf.parent('div.red'); // 从Swift的父节点开始向上查找，直到找到某个符合条件的节点并返回

	对于位于同一层级的节点，可以通过next()和prev()方法，例如：
    当我们已经拿到Swift节点后：
    var swift = $('#swift');
    swift.next(); // Scheme
	swift.next('[name=haskell]'); // Haskell，因为Haskell是后续第一个符合选择器条件的节点
    swift.prev(); // Python
	swift.prev('.js'); // JavaScript，因为JavaScript是往前第一个符合选择器条件的节点

	过滤
    和函数式编程的map、filter类似，jQuery对象也有类似的方法。
    filter()方法可以过滤掉不符合选择器条件的节点：
    var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
	var a = langs.filter('.dy'); // 拿到JavaScript, Python, Scheme
	或者传入一个函数，要特别注意函数内部的this被绑定为DOM对象，不是jQuery对象：
    var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
	langs.filter(function () {
	    return this.innerHTML.indexOf('S') === 0; // 返回S开头的节点
	}); // 拿到Swift, Scheme
	map()方法把一个jQuery对象包含的若干DOM节点转化为其他对象：

	var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
	var arr = langs.map(function () {
	    return this.innerHTML;
	}).get(); // 用get()拿到包含string的Array：['JavaScript', 'Python', 'Swift', 'Scheme', 'Haskell']
	此外，一个jQuery对象如果包含了不止一个DOM节点，first()、last()和slice()方法可以返回一个新的jQuery对象，把不需要的DOM节点去掉：

	var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
	var js = langs.first(); // JavaScript，相当于$('ul.lang li:first-child')
	var haskell = langs.last(); // Haskell, 相当于$('ul.lang li:last-child')
	var sub = langs.slice(2, 4); // Swift, Scheme, 参数和数组的slice()方法一致

	要特别注意函数内部的this被绑定为DOM对象，不是jQuery对象：
	var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
	langs.filter(function () {
	    return this.innerHTML.indexOf('S') === 0; // 返回S开头的节点
	}); // 拿到Swift, Scheme

	map()方法把一个jQuery对象包含的若干DOM节点转化为其他对象：
	var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
	var arr = langs.map(function () {
	    return this.innerHTML;
	}).get();
	此外，一个jQuery对象如果包含了不止一个DOM节点，first()、last()和slice()方法可以返回一个新的jQuery对象，把不需要的DOM节点去掉：
    var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
	var js = langs.first(); // JavaScript，相当于$('ul.lang li:first-child')
	var haskell = langs.last(); // Haskell, 相当于$('ul.lang li:last-child')
	var sub = langs.slice(2, 4); // Swift, Scheme, 参数和数组的slice()方法一致

	操作DOM
	回顾一下修改DOM的CSS、文本、设置HTML有多么麻烦，而且有的浏览器只有innerHTML，有的浏览器支持innerText，有了jQuery对象，不需要考虑浏览器差异了，全部统一操作！
	修改Text和HTML

	jQuery对象的text()和html()方法分别获取节点的文本和原始HTML文本，例如，如下的HTML结构：

	<!-- HTML结构 -->
	<ul id="test-ul">
	    <li class="js">JavaScript</li>
	    <li name="book">Java &amp; JavaScript</li>
	</ul>
	分别获取文本和HTML：

	$('#test-ul li[name=book]').text(); // 'Java & JavaScript'
	$('#test-ul li[name=book]').html(); // 'Java &amp; JavaScript'

	一个jQuery对象可以包含0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上。在上面的例子中试试：
	$('#test-ul li').text('JS'); // 是不是两个节点都变成了JS？
	所以jQuery对象的另一个好处是我们可以执行一个操作，作用在对应的一组DOM节点上。即使选择器没有返回任何DOM节点，调用jQuery对象的方法仍然不会报错：

	// 如果不存在id为not-exist的节点：
	$('#not-exist').text('Hello'); // 代码不报错，没有节点被设置为'Hello'
	这意味着jQuery帮你免去了许多if语句。
	修改CSS

	jQuery对象有“批量操作”的特点，这用于修改CSS实在是太方便了。考虑下面的HTML结构：
	<!-- HTML结构 -->
	<ul id="test-css">
	    <li class="lang dy"><span>JavaScript</span></li>
	    <li class="lang"><span>Java</span></li>
	    <li class="lang dy"><span>Python</span></li>
	    <li class="lang"><span>Swift</span></li>
	    <li class="lang dy"><span>Scheme</span></li>
	</ul>
	要高亮显示动态语言，调用jQuery对象的css('name', 'value')方法，我们用一行语句实现：
	$('#test-css li.dy>span').css('background-color', '#ffd351').css('color', 'red');

	Query对象的css()方法可以这么用：
	var div = $('#test-div');
	div.css('color'); // '#000033', 获取CSS属性
	div.css('color', '#336699'); // 设置CSS属性
	div.css('color', ''); // 清除CSS属性

	css()方法将作用于DOM节点的style属性，具有最高优先级。如果要修改class属性，可以用jQuery提供的下列方法：
	var div = $('#test-div');
	div.hasClass('highlight'); // false， class是否包含highlight
	div.addClass('highlight'); // 添加highlight这个class
	div.removeClass('highlight'); // 删除highlight这个class

	显示和隐藏DOM
	要隐藏一个DOM，我们可以设置CSS的display属性为none，利用css()方法就可以实现。不过，要显示这个DOM就需要恢复原有的display属性，这就得先记下来原有的display属性到底是block还是inline还是别的值。
	考虑到显示和隐藏DOM元素使用非常普遍，jQuery直接提供show()和hide()方法，我们不用关心它是如何修改display属性的，总之它能正常工作：
	var a = $('a[target=_blank]');
	a.hide(); // 隐藏
	a.show(); // 显示
	注意，隐藏DOM节点并未改变DOM树的结构，它只影响DOM节点的显示。这和删除DOM节点是不同的。

	获取DOM信息
	利用jQuery对象的若干方法，我们直接可以获取DOM的高宽等信息，而无需针对不同浏览器编写特定代码：
	// 浏览器可视窗口大小:
	$(window).width(); // 800
	$(window).height(); // 600
	// HTML文档大小:
	$(document).width(); // 800
	$(document).height(); // 3500
	// 某个div的大小:
	var div = $('#test-div');
	div.width(); // 600
	div.height(); // 300
	div.width(400); // 设置CSS属性 width: 400px，是否生效要看CSS是否有效
	div.height('200px'); // 设置CSS属性 height: 200px，是否生效要看CSS是否有效

	attr()和removeAttr()方法用于操作DOM节点的属性：
	// <div id="test-div" name="Test" start="1">...</div>
	var div = $('#test-div');
	div.attr('data'); // undefined, 属性不存在
	div.attr('name'); // 'Test'
	div.attr('name', 'Hello'); // div的name属性变为'Hello'
	div.removeAttr('name'); // 删除name属性
	div.attr('name'); // undefined
	prop()方法和attr()类似，但是HTML5规定有一种属性在DOM节点中可以没有值，只有出现与不出现两种，例如：
	<input id="test-radio" type="radio" name="test" checked value="1">
	等价于：
	<input id="test-radio" type="radio" name="test" checked="checked" value="1">
	attr()和prop()对于属性checked处理有所不同：
	var radio = $('#test-radio');
	radio.attr('checked'); // 'checked'
	radio.prop('checked'); // true
	prop()返回值更合理一些。不过，用is()方法判断更好：
	var radio = $('#test-radio');
	radio.is(':checked'); // true
	类似的属性还有selected，处理时最好用is(':selected')。


	操作表单
	对于表单元素，jQuery对象统一提供val()方法获取和设置对应的value属性：

	/*
	    <input id="test-input" name="email" value="">
	    <select id="test-select" name="city">
	        <option value="BJ" selected>Beijing</option>
	        <option value="SH">Shanghai</option>
	        <option value="SZ">Shenzhen</option>
	    </select>
	    <textarea id="test-textarea">Hello</textarea>
	*/
	var
	    input = $('#test-input'),
	    select = $('#test-select'),
	    textarea = $('#test-textarea');

	input.val(); // 'test'
	input.val('abc@example.com'); // 文本框的内容已变为abc@example.com
	select.val(); // 'BJ'
	select.val('SH'); // 选择框已变为Shanghai
	textarea.val(); // 'Hello'
	textarea.val('Hi'); // 文本区域已更新为'Hi'
	可见，一个val()就统一了各种输入框的取值和赋值的问题。


	事件
	因为JavaScript在浏览器中以单线程模式运行，页面加载后，一旦页面上所有的JavaScript代码被执行完后，就只能依赖触发事件来执行JavaScript代码。
	浏览器在接收到用户的鼠标或键盘输入后，会自动在对应的DOM节点上触发相应的事件。如果该节点已经绑定了对应的JavaScript处理函数，该函数就会自动调用。
	由于不同的浏览器绑定事件的代码都不太一样，所以用jQuery来写代码，就屏蔽了不同浏览器的差异，我们总是编写相同的代码
    /* HTML:
	 *
	 * <a id="test-link" href="#0">点我试试</a>
	 *
	 */

	// 获取超链接的jQuery对象:
	var a = $('#test-link');
	a.on('click', function () {
	    alert('Hello!');
	});

	on方法用来绑定一个事件，我们需要传入事件名称和对应的处理函数。
	另一种更简化的写法是直接调用click()方法：
	a.click(function () {
	    alert('Hello!');
	});
	两者完全等价。

	键盘事件
	键盘事件仅作用在当前焦点的DOM上，通常是<input>和<textarea>。
	keydown：键盘按下时触发；
	keyup：键盘松开时触发；
	keypress：按一次键后触发。

	其他事件
	focus：当DOM获得焦点时触发；
	blur：当DOM失去焦点时触发；
	change：当<input>、<select>或<textarea>的内容改变时触发；
	submit：当<form>提交时触发；
	ready：当页面被载入并且DOM树完成初始化后触发。

	ready仅作用于document对象。由于ready事件在DOM完成初始化后触发，且只触发一次，所以非常适合用来写其他的初始化代码。
	因为JavaScript在此执行的时候，<form>尚未载入浏览器，所以$('#testForm)返回[]，并没有绑定事件到任何DOM上。
    由于ready事件使用非常普遍，所以可以这样简化：
	$(document).ready(function () {
	    // on('submit', function)也可以简化:
	    $('#testForm).submit(function () {
	        alert('submit!');
	    });
	});
	甚至还可以再简化为：
	$(function () {
	    // init...
	});

	上面的这种写法最为常见。如果你遇到$(function () {...})的形式，牢记这是document对象的ready事件处理函数。
	完全可以反复绑定事件处理函数，它们会依次执行：
	$(function () {
	    console.log('init A...');
	});
	$(function () {
	    console.log('init B...');
	});
	$(function () {
	    console.log('init C...');
	});
    
    事件参数
	有些事件，如mousemove和keypress，我们需要获取鼠标位置和按键的值，否则监听这些事件就没什么意义了。所有事件都会传入Event对象作为参数，可以从Event对象上获取到更多的信息：
	$(function () {
	    $('#testMouseMoveDiv').mousemove(function (e) {
	        $('#testMouseMoveSpan').text('pageX = ' + e.pageX + ', pageY = ' + e.pageY);
	    });
	});

	取消绑定

	一个已被绑定的事件可以解除绑定，通过off('click', function)实现：
	function hello() {
	    alert('hello!');
	}
	a.click(hello); // 绑定事件
	// 10秒钟后解除绑定:
	setTimeout(function () {
	    a.off('click', hello);
	}, 10000);

    需要特别注意的是，下面这种写法是无效的：
	// 绑定事件:
	a.click(function () {
	    alert('hello!');
	});

	// 解除绑定:
	a.off('click', function () {
	    alert('hello!');
	});
	这是因为两个匿名函数虽然长得一模一样，但是它们是两个不同的函数对象，off('click', function () {...})无法移除已绑定的第一个匿名函数。
	为了实现移除效果，可以使用off('click')一次性移除已绑定的click事件的所有处理函数。
	同理，无参数调用off()一次性移除已绑定的所有类型的事件处理函数。


	事件触发条件
	一个需要注意的问题是，事件的触发总是由用户操作引发的。例如，我们监控文本框的内容改动：
	var input = $('#test-input');
	input.change(function () {
	    console.log('changed...');
	});
	当用户在文本框中输入时，就会触发change事件。但是，如果用JavaScript代码去改动文本框的值，将不会触发change事件：
	var input = $('#test-input');
	input.val('change it!'); // 无法触发change事件

	我们希望用代码触发change事件，可以直接调用无参数的change()方法来触发该事件：
	var input = $('#test-input');
	input.val('change it!');
	input.change(); // 触发change事件

	浏览器安全限制
	在浏览器中，有些JavaScript代码只有在用户触发下才能执行，例如，window.open()函数：
	// 无法弹出新窗口，将被浏览器屏蔽:
	$(function () {
	    window.open('/');
	});


    动画
    用JavaScript实现动画，原理非常简单：我们只需要以固定的时间间隔（例如，0.1秒），每次把DOM元素的CSS样式修改一点（例如，高宽各增加10%），看起来就像动画了。
	但是要用JavaScript手动实现动画效果，需要编写非常复杂的代码。如果想要把动画效果用函数封装起来便于复用，那考虑的事情就更多了。
	使用jQuery实现动画，代码已经简单得不能再简化了：只需要一行代码！
	让我们先来看看jQuery内置的几种动画样式：
	show / hide
	直接以无参数形式调用show()和hide()，会显示和隐藏DOM元素。但是，只要传递一个时间参数进去，就变成了动画：
	var div = $('#test-show-hide');
	div.hide(3000); // 在3秒钟内逐渐消失
	时间以毫秒为单位，但也可以是'slow'，'fast'这些字符串：
	var div = $('#test-show-hide');
	div.show('slow'); // 在0.6秒钟内逐渐显示
	toggle()方法则根据当前状态决定是show()还是hide()。


	AJAX
	用JavaScript写AJAX前面已经介绍过了，主要问题就是不同浏览器需要写不同代码，并且状态和错误处理写起来很麻烦。用jQuery的相关对象来处理AJAX，不但不需要考虑浏览器问题，代码也能大大简化。

	jQuery在全局对象jQuery（也就是$）绑定了ajax()函数，可以处理AJAX请求。ajax(url, settings)函数需要接收一个URL和一个可选的settings对象，常用的选项如下：
	async：是否异步执行AJAX请求，默认为true，千万不要指定为false；
	method：发送的Method，缺省为'GET'，可指定为'POST'、'PUT'等；
	contentType：发送POST请求的格式，默认值为'application/x-www-form-urlencoded; charset=UTF-8'，也可以指定为text/plain、application/json；
	data：发送的数据，可以是字符串、数组或object。如果是GET请求，data将被转换成query附加到URL上，如果是POST请求，根据contentType把data序列化成合适的格式；
	headers：发送的额外的HTTP头，必须是一个object；
	dataType：接收的数据格式，可以指定为'html'、'xml'、'json'、'text'等，缺省情况下根据响应的Content-Type猜测。
	EMP：
	var jqxhr = $.ajax('/api/categories', {
    dataType: 'json'
	}).done(function (data) {
	    ajaxLog('成功, 收到的数据: ' + JSON.stringify(data));
	}).fail(function (xhr, status) {
	    ajaxLog('失败: ' + xhr.status + ', 原因: ' + status);
	}).always(function () {
	    ajaxLog('请求完成: 无论成功或失败都会调用');
	});
	get
	对常用的AJAX操作，jQuery提供了一些辅助方法。由于GET请求最常见，所以jQuery提供了get()方法，可以这么写：
    var jqxhr = $.get('/path/to/resource', {
	    name: 'Bob Lee',
	    check: 1
	});
	第二个参数如果是object，jQuery自动把它变成query string然后加到URL后面，实际的URL是：
	/path/to/resource?name=Bob%20Lee&check=1
	这样我们就不用关心如何用URL编码并构造一个query string了。

	post 
	post()和get()类似，但是传入的第二个参数默认被序列化为application/x-www-form-urlencoded：
	var jqxhr = $.post('/path/to/resource', {
	    name: 'Bob Lee',
	    check: 1
	});
	实际构造的数据name=Bob%20Lee&check=1作为POST的body被发送。

	getJSON
	由于JSON用得越来越普遍，所以jQuery也提供了getJSON()方法来快速通过GET获取一个JSON对象：
	var jqxhr = $.getJSON('/path/to/resource', {
	    name: 'Bob Lee',
	    check: 1
	}).done(function (data) {
	    // data已经被解析为JSON对象了
	});


	扩展
	我们可以扩展jQuery来实现自定义方法。将来如果要修改高亮的逻辑，只需修改一处扩展代码。这种方式也称为编写jQuery插件。
	编写jQuery插件
	给jQuery对象绑定一个新方法是通过扩展$.fn对象实现的。让我们来编写第一个扩展——highlight()：
	$.fn.highlight = function () {
	    // this已绑定为当前jQuery对象:
	    this.css('backgroundColor', '#fffceb').css('color', '#d85030');
	    return this;
	}
	注意到函数内部的this在调用时被绑定为jQuery对象，所以函数内部代码可以正常调用所有jQuery对象的方法。
	为什么最后要return this？因为jQuery对象支持链式操作，我们自己写的扩展方法也要能继续链式下去
	我们可以给方法加个参数，让用户自己把参数用对象传进去。于是我们有了第二个版本的highlight2()：
	$.fn.highlight2 = function (options) {
	    // 要考虑到各种情况:
	    // options为undefined
	    // options只有部分key
	    var bgcolor = options && options.backgroundColor || '#fffceb';
	    var color = options && options.color || '#d85030';
	    this.css('backgroundColor', bgcolor).css('color', color);
	    return this;
	}
	// 把默认值和用户传入的options合并到对象{}中并返回:
	另一种方法是使用jQuery提供的辅助方法$.extend(target, obj1, obj2, ...)，它把多个object对象的属性合并到第一个target对象中，遇到同名属性，总是使用靠后的对象的值，也就是越往后优先级越高：
	var opts = $.extend({}, {
	    backgroundColor: '#00a8e6',
	    color: '#ffffff'
	}, options);
	最终版的highlight()终于诞生了
	$.fn.highlight = function (options) {
	    // 合并默认值和用户设定值:
	    var opts = $.extend({}, $.fn.highlight.defaults, options);
	    this.css('backgroundColor', opts.backgroundColor).css('color', opts.color);
	    return this;
	}

	// 设定默认值:
	$.fn.highlight.defaults = {
	    color: '#d85030',
	    backgroundColor: '#fff8de'
	}
	最终，我们得出编写一个jQuery插件的原则：
	给$.fn绑定函数，实现插件的代码逻辑；
	插件函数最后要return this;以支持链式调用；
	插件函数要有默认值，绑定在$.fn.<pluginName>.defaults上；
	用户在调用时可传入设定值以便覆盖默认值。
	小结
    扩展jQuery对象的功能十分简单，但是我们要遵循jQuery的原则，编写的扩展方法能支持链式调用、具备默认值和过滤特定元素，使得扩展方法看上去和jQuery本身的方法没有什么区别。



